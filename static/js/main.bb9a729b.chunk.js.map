{"version":3,"sources":["settings/AppSettings.tsx","settings/Api.tsx","settings/DogService.tsx","models/coresEnum.tsx","models/fontsEnum.tsx","storage/DogStorage.tsx","components/Card.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["axios","create","baseURL","AppSettings","interceptors","request","use","config","a","Api","DogService","getListAllBreeds","get","then","result","data","message","getDogsByBreed","breed","count","map","url","card","imgUrl","font","value","label","color","CoresEnum","White","key","Yellow","Magenta","Red","Lime","FontsEnum","Oswald","Pacifico","Righteous","Permanent","AlfaSlabOne","DogStorage","dog","this","getDogs","_dogs","push","localStorage","setItem","JSON","stringify","getItem","parse","Card","props","_coresOptions","_fontsOptions","_onChange","e","dogCard","currentTarget","onChange","cardKey","_selectFont","select","_selectColor","_save","_dog","datetime","Date","lastupdate","toISOString","filename","_fileNameFromUrl","finename","active","setCurrentDog","_clearState","onSave","matches","match","length","state","bind","className","onClick","src","alt","style","placeholder","options","React","Component","AppNavigator","componentDidMount","_load","_loadBreeds","_notify","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","_refreshBreeds","_loadDogsByBreed","selectBreeds","_breeds","allBreed","iterator","setState","breeds","_onSelect","option","refreshAnimation","replace","dogs","_clickCard","index","isActive","i","updateCard","isLoading","item","id","data-select2-id","renderImage","newestOnTop","rtl","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bb9a729b.chunk.js","sourcesContent":["export default {\r\n    \"dogApiUrl\":\"https://dog.ceo/api/\"\r\n}","\r\nimport axios from 'axios';\r\nimport AppSettings from '../settings/AppSettings';\r\n\r\n\r\nconst _Api = axios.create({ baseURL: AppSettings.dogApiUrl });\r\n_Api.interceptors.request.use(async config => { return config; });\r\n\r\n\r\nconst Api = axios.create({\r\n  baseURL: AppSettings.dogApiUrl\r\n\r\n});\r\n\r\nApi.interceptors.request.use(async config => {\r\n\r\n\r\n  return config;\r\n});\r\n\r\nexport default Api;","import Api from './Api';\r\nimport { DogCardModel } from '../models/DogCardModel';\r\n\r\n\r\n\r\nexport class DogService {\r\n  static getListAllBreeds = async () => {\r\n    return await Api.get(`/breeds/list/all`).then((result) => {\r\n      return result.data.message\r\n    });\r\n  }\r\n  static getDogsByBreed = async (breed: string, count: number) => {\r\n\r\n    return await Api.get(`breed/${breed}/images/random/${count}`).then((result) => {\r\n      return result.data.message.map((url: string) => {\r\n        let card: DogCardModel = {}\r\n        card.label = \"\";\r\n        card.imgUrl = url;\r\n        card.font = { value: \"\", label: \"\" };\r\n        card.color = { value: \"\", label: \"\" };\r\n        return card\r\n      });\r\n    });\r\n\r\n  };\r\n}","export class CoresEnum {\r\n    static White = ({ key: '#FFFFFF', value: \"White\" });\r\n    static Yellow = ({ key: '#FFFF00', value: \"Yellow\" });\r\n    static Magenta = ({ key: '#FF00FF', value: \"Magenta\" });\r\n    static Red = ({ key: '#FF0000', value: \"Red\" });\r\n    static Lime = ({ key: '#00FF00', value: \"Lime\" });\r\n}","export class FontsEnum {\r\n    static Oswald = ({ key: 'font-Oswald', value: \"Oswald\" });\r\n    static Pacifico = ({ key: 'font-pacifico', value: \"Pacifico\" });\r\n    static Righteous = ({ key: 'font-righteous', value: \"Righteous\" });\r\n    static Permanent = ({ key: 'font-permanent', value: \"Permanent\" });\r\n    static AlfaSlabOne = ({ key: 'font-slab', value: \"Alfa Slab One\" })\r\n\r\n\r\n}","import { DogCardModel } from \"../models/DogCardModel\";\r\n\r\nexport class DogStorage {\r\n  static async setCurrentDog(dog: DogCardModel) {\r\n    let _dogs: DogCardModel[] = await this.getDogs()\r\n    if (!_dogs) { _dogs = [] }\r\n\r\n    _dogs.push(dog)\r\n    await localStorage.setItem('dogs', JSON.stringify(_dogs));\r\n  }\r\n  static async getDogs() {\r\n    let _dogs = localStorage.getItem(\"dogs\")\r\n\r\n    return _dogs ? JSON.parse(_dogs) : null\r\n  }\r\n}","import React from \"react\";\r\nimport Select from \"react-select\";\r\nimport { CoresEnum } from \"../models/coresEnum\";\r\nimport { FontsEnum } from \"../models/fontsEnum\";\r\nimport { DogCardModel } from \"../models/DogCardModel\";\r\nimport { DogStorage } from \"../storage/DogStorage\";\r\n\r\nexport type Props = {\r\n  cardKey: number;\r\n  dogCard: DogCardModel;\r\n  onChange: Function;\r\n  onClick: Function;\r\n  active?: string;\r\n  onSave: Function;\r\n};\r\n\r\nexport type States = {};\r\n\r\nexport default class Card extends React.Component<Props, States> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n\r\n    this._onChange = this._onChange.bind(this);\r\n  }\r\n\r\n  _coresOptions = [\r\n    { value: CoresEnum.Magenta.key, label: CoresEnum.Magenta.value },\r\n    { value: CoresEnum.Yellow.key, label: CoresEnum.Yellow.value },\r\n    { value: CoresEnum.White.key, label: CoresEnum.White.value },\r\n    { value: CoresEnum.Red.key, label: CoresEnum.Red.value },\r\n    { value: CoresEnum.Lime.key, label: CoresEnum.Lime.value }\r\n  ];\r\n  _fontsOptions = [\r\n    { value: FontsEnum.Oswald.key, label: FontsEnum.Oswald.value },\r\n    { value: FontsEnum.Pacifico.key, label: FontsEnum.Pacifico.value },\r\n    { value: FontsEnum.Righteous.key, label: FontsEnum.Righteous.value },\r\n    { value: FontsEnum.Permanent.key, label: FontsEnum.Permanent.value },\r\n    { value: FontsEnum.AlfaSlabOne.key, label: FontsEnum.AlfaSlabOne.value }\r\n  ];\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className={\"card\" + this.props.active}\r\n        onClick={() => {\r\n          this.props.onClick(this.props.cardKey, true);\r\n        }}\r\n      >\r\n        <div className=\"card-container\">\r\n          <div className=\"card-image\">\r\n            <img src={this.props.dogCard.imgUrl} alt=\"\" />\r\n            <div\r\n              className={\r\n                \"img-text \" +\r\n                (this.props.dogCard.font ? this.props.dogCard.font.value : \"\")\r\n              }\r\n              style={{\r\n                color: this.props.dogCard.color\r\n                  ? this.props.dogCard.color.value\r\n                  : \"\"\r\n              }}\r\n            >\r\n              {this.props.dogCard.label}\r\n            </div>\r\n          </div>\r\n          <div className=\"card-edit\">\r\n            <input\r\n              placeholder=\"Text..\"\r\n              value={this.props.dogCard.label}\r\n              onChange={value => this._onChange(value)}\r\n            />\r\n            <Select\r\n              placeholder=\"Font\"\r\n              value={this.props.dogCard.font}\r\n              options={this._fontsOptions}\r\n              onChange={this._selectFont}\r\n            />\r\n\r\n            <Select\r\n              placeholder=\"Color\"\r\n              value={this.props.dogCard.color}\r\n              options={this._coresOptions}\r\n              onChange={this._selectColor}\r\n            />\r\n            <button className=\"btn-save\" onClick={this._save}>\r\n              Save\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  _onChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    let card = { ...this.props.dogCard };\r\n    card.label = e.currentTarget.value;\r\n\r\n    this.props.onChange(this.props.cardKey, card);\r\n  };\r\n  _selectFont = (select: any) => {\r\n    this.props.onChange(this.props.cardKey, {\r\n      ...this.props.dogCard,\r\n      font: select\r\n    });\r\n  };\r\n  _selectColor = (select: any) => {\r\n    this.props.onChange(this.props.cardKey, {\r\n      ...this.props.dogCard,\r\n      color: select\r\n    });\r\n  };\r\n  _save = () => {\r\n    if (this.props.dogCard.label === \"\") {\r\n      return false;\r\n    }\r\n    let _dog = { ...this.props.dogCard };\r\n    const datetime = new Date();\r\n    _dog.lastupdate = datetime.toISOString();\r\n    const filename = this._fileNameFromUrl(_dog.imgUrl);\r\n    _dog.finename = filename ? filename : \"\";\r\n    _dog.active = false;\r\n    DogStorage.setCurrentDog(_dog);\r\n\r\n    this._clearState();\r\n    this.props.onSave();\r\n  };\r\n\r\n  _fileNameFromUrl = (url?: string) => {\r\n    if (!url) {\r\n      return null;\r\n    }\r\n    const matches = url.match(/\\/([^\\/?#]+)[^\\/]*$/);\r\n    if (!(matches && matches.length > 1)) {\r\n      return null;\r\n    } else {\r\n      return matches[1];\r\n    }\r\n  };\r\n\r\n  _clearState = () => {\r\n    let card = { ...this.props.dogCard };\r\n    card.label = \"\";\r\n    card.font = { value: \"\", label: \"\" };\r\n    card.color = { value: \"\", label: \"\" };\r\n    card.active = false;\r\n    card.finename = \"\";\r\n    this.props.onChange(this.props.cardKey, card);\r\n  };\r\n\r\n}\r\n","import React from \"react\";\r\nimport { DogService } from \"./settings/DogService\";\r\nimport Select from \"react-select\";\r\nimport Card from \"./components/Card\";\r\nimport { DogCardModel } from \"./models/DogCardModel\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { IoIosRefreshCircle } from \"react-icons/io\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport \"./App.css\";\r\n\r\n\r\n\r\nexport type Props = {};\r\n\r\nexport type States = {\r\n  isLoading: boolean;\r\n  breeds: Array<{}>;\r\n  dogs: DogCardModel[];\r\n  refreshAnimation: boolean;\r\n  selectBreeds: any\r\n\r\n};\r\n\r\nexport default class AppNavigator extends React.Component<Props, States> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoading: false,\r\n      breeds: [],\r\n      dogs: [],\r\n      refreshAnimation: false,\r\n      selectBreeds: {}\r\n    };\r\n    this._refreshBreeds = this._refreshBreeds.bind(this);\r\n  }\r\n\r\n\r\n  renderImage() {\r\n    return (\r\n      <div className=\"cards\">\r\n        {\" \"}\r\n        {this.state.dogs.map((item, index) => {\r\n          return (\r\n            <Card key={index} cardKey={index} onSave={this._notify} onChange={this.updateCard} onClick={this._clickCard} active={(item.active ? \" active\" : \"\")} dogCard={item} />\r\n          )\r\n        })}{\" \"}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n      <div className=\"App\">\r\n        <nav className=\"nav-wrapper\">\r\n          <div className=\"container dflex\">\r\n            <h1>Dog Api </h1>\r\n            <div className=\"select-breeds\">\r\n              <Select value={this.state.selectBreeds} options={this.state.breeds} onChange={this._onSelect} />\r\n            </div>\r\n            <div className=\"count-dogs \" >\r\n              <div className={this.state.refreshAnimation ? 'btn-refresh rotate-center' : 'btn-refresh'} onClick={this._refreshBreeds} >\r\n                <IoIosRefreshCircle />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n        <section id=\"search\" data-select2-id=\"search\">\r\n          <div className=\"container\">{this.renderImage()}</div>\r\n        </section>\r\n\r\n        <ToastContainer\r\n          position=\"top-right\"\r\n          autoClose={5000}\r\n          hideProgressBar={false}\r\n          newestOnTop={false}\r\n          closeOnClick\r\n          rtl={false}\r\n          draggable\r\n          pauseOnHover={false}\r\n        />\r\n        <div className=\"dog-image\"></div>\r\n      </div>\r\n\r\n\r\n    );\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    await this._load();\r\n  };\r\n\r\n  _load = async () => {\r\n    await this._loadBreeds();\r\n  };\r\n\r\n  _notify = () => {\r\n    toast.success(\"saved successfully\", {\r\n      position: \"top-right\",\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: false,\r\n      draggable: true,\r\n    })\r\n  };\r\n\r\n  _refreshBreeds = () => {\r\n\r\n    this._loadDogsByBreed(this.state.selectBreeds.value)\r\n\r\n\r\n\r\n  }\r\n  _loadBreeds = async () => {\r\n    let _breeds: any = await DogService.getListAllBreeds();\r\n    let allBreed: Array<{}> = [];\r\n\r\n    for (const key in _breeds) {\r\n      if (_breeds[key].length > 0) {\r\n        for (const iterator of _breeds[key]) {\r\n          allBreed.push({\r\n            value: `${key}-${iterator}`,\r\n            label: `${key} ${iterator}`\r\n          });\r\n        }\r\n        allBreed.push({ value: key, label: key });\r\n      }\r\n\r\n    }\r\n    await this.setState({\r\n      breeds: allBreed,\r\n      selectBreeds: allBreed[5]\r\n    });\r\n    this._refreshBreeds()\r\n  };\r\n\r\n  _onSelect = (option: any) => {\r\n    this.setState({ selectBreeds: option })\r\n    this._loadDogsByBreed(option.value);\r\n  };\r\n\r\n  _loadDogsByBreed = async (breed: string) => {\r\n    this.setState({ refreshAnimation: true })\r\n    breed = breed.replace(\"-\", \"/\");\r\n    let dogs: any = await DogService.getDogsByBreed(breed, 3);\r\n\r\n\r\n\r\n    await this.setState({ dogs: dogs, refreshAnimation: false });\r\n  };\r\n  _clickCard = async (index: number, isActive: boolean) => {\r\n    for (let i = 0; i < this.state.dogs.length; i++) {\r\n      (i === index ? this.state.dogs[i].active = isActive : this.state.dogs[i].active = false);\r\n    }\r\n    await this.setState({ dogs: this.state.dogs })\r\n  }\r\n\r\n  updateCard = (index: number, dog: DogCardModel) => {\r\n\r\n    this.state.dogs[index] = dog;\r\n\r\n    this.setState({ dogs: this.state.dogs })\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}